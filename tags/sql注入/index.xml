<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql注入 on woieha320r</title>
    <link>https://woieha320r.github.io/tags/sql%E6%B3%A8%E5%85%A5/</link>
    <description>Recent content in sql注入 on woieha320r</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 29 Aug 2022 10:29:54 +0800</lastBuildDate><atom:link href="https://woieha320r.github.io/tags/sql%E6%B3%A8%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sql注入</title>
      <link>https://woieha320r.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 29 Aug 2022 10:29:54 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5/</guid>
      <description>sql注入 · 在数据库每次都解析语法且SQL构成包含外部来源参数的情况下，通过在传给SQL的参数中添油加醋改变其原本语法，查询自己需要的信息。
sql预编译 · 数据库执行一条SQL语句需要先分析其语法，但大部分SQL查询语法是相同的，只是条件不同。
· 现在提前将这个SQL的语法解析出来，后期查询通过填入不同参数来获得不同结果，无需每次都解析语法。在省去多次解析时间的同时还能防止SQL注入，因为不 再每次都解析语法，传入的参数就只是查询条件，不影响SQL的原本语法。
· 预编译只能将字段值作为条件占位符，如果连字段都不确定，是不能预编译的，比如where name = ?可以预编译，但如果连是name还是nickname都是动态的， 就不能预编译。
· 预编译分服务端和客户端，即便不开启服务端预编译，JVM完成的预编译也能阻止SQL注入。
java中的sql注入 · java.sql包下的PreparedStatement用于预编译。mybatis框架中的#{}是通过PreparedStatement预编译的。但like、in、order by直接用#{}会 报错，若开发者使用了${}代替，则可被注入。</description>
    </item>
    
    <item>
      <title>sqli-labs</title>
      <link>https://woieha320r.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql%E6%B3%A8%E5%85%A5/sqli-labs/sqli-labs/</link>
      <pubDate>Sat, 27 Aug 2022 10:28:05 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql%E6%B3%A8%E5%85%A5/sqli-labs/sqli-labs/</guid>
      <description>sqli-labs docker run -dt \ -p 80:80 \ -p 3306:3306 \ --name sqli-labs \ acgpiano/sqli-labs #访问localhost #点击 Setup/reset Database for labs 返回后点击图片中的各个关卡</description>
    </item>
    
  </channel>
</rss>
