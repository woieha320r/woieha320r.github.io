<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on woieha320r</title>
    <link>https://woieha320r.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on woieha320r</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Feb 2023 11:41:36 +0800</lastBuildDate><atom:link href="https://woieha320r.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>迭代器</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Wed, 01 Feb 2023 11:41:36 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>迭代器 提供一种遍历不同容器的统一方式，如java.util.Iterator&amp;lt;E&amp;gt; </description>
    </item>
    
    <item>
      <title>装饰器</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Wed, 01 Feb 2023 10:58:31 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>装饰器 用非继承方式实现功能扩展 · 抽象服务在有标准实现的同时，提供Wrapper继承并组合抽象服务，后续的功能扩展通过继承Wrapper实现
classDiagram class Component { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;method() void } class ComponentImpl ComponentImpl ..|&amp;gt; Component : 实现 class AbstractComponentWrapper { &amp;lt;&amp;lt;abstract&amp;gt;&amp;gt; -Component component } AbstractComponentWrapper *-- Component : 构造器初始化成员 class ComponentWrapperA { &amp;#43;otherMethodA() void } ComponentWrapperA --|&amp;gt; AbstractComponentWrapper : 继承 class ComponentWrapperB { &amp;#43;otherMethodB() void } ComponentWrapperB --|&amp;gt; AbstractComponentWrapper : 继承 </description>
    </item>
    
    <item>
      <title>门面</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2/</link>
      <pubDate>Wed, 01 Feb 2023 10:49:37 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2/</guid>
      <description>门面 将需要用到的繁多的服务组合到一起，一般不添加额外的逻辑，只是作为统一的调用入口，比如controller </description>
    </item>
    
    <item>
      <title>责任链</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE/</link>
      <pubDate>Wed, 01 Feb 2023 09:11:34 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE/</guid>
      <description>责任链 每个审批者作为链中的处理节点只处理一件事情，比如servlet过滤器 · 一般和建造者结合
import java.util.ArrayList; import java.util.List; interface Handler { //实现类自己实现，放行返回true，中止返回false boolean handle(Object param); } class HandlerChain { private final List&amp;lt;Handler&amp;gt; handlers; private HandlerChain(List&amp;lt;Handler&amp;gt; handlers) { this.handlers = handlers; } public static class Builder { private final List&amp;lt;Handler&amp;gt; handlers = new ArrayList&amp;lt;&amp;gt;(); public HandlerChain.Builder next(Handler handler) { handlers.add(handler); return this; } public HandlerChain build() { return new HandlerChain(handlers); } } public void doChain(Object param) { for (Handler handler : handlers) { if (!</description>
    </item>
    
    <item>
      <title>策略</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5/</link>
      <pubDate>Tue, 31 Jan 2023 14:22:50 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5/</guid>
      <description>策略 · 看起来和工厂差别不大，工厂是根据条件返回实例，策略是根据条件发生行为🤷‍♂️。可应用于分段计价场景，不同计价方式分别作为策略实现 classDiagram class Strategy { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;doOperation() void } class StrategyA StrategyA ..|&amp;gt; Strategy : 实现 class StrategyB StrategyB ..|&amp;gt; Strategy : 实现 class Context { -Strategy strategy &amp;#43;execStrategy(Strategy strategy) void } Context *-- Strategy : 构造器初始化成员 class Main Main ..&amp;gt; Context : 实例化 Main ..&amp;gt; StrategyA : 实例化 Main ..&amp;gt; StrategyB : 实例化 · 如果想隐藏实例化过程，那就需要工厂实例化策略
classDiagram class Strategy { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;doOperation() void } class StrategyA StrategyA ..|&amp;gt; Strategy : 实现 class StrategyB StrategyB .</description>
    </item>
    
    <item>
      <title>模版方法</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 31 Jan 2023 13:46:31 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95/</guid>
      <description>模版方法 用于规定方法调用顺序，但自己不负责实现方法，适用于规定几乎永远不变的流程 · Java里抽象类就是这个作用，规定方法的调用顺序，具体实现由子类实现
abstract class Template { abstract protected void doA(); abstract protected boolean needDoC(); abstract protected void doC(); public final void doing() { doA(); //钩子，是否需要调用由子类自己实现 if (needDoC()) { doC(); } } } public class TemplateImpl extends Template { @Override protected void doA() { System.out.println(&amp;#34;A&amp;#34;); } @Override protected boolean needDoC() { return true; } @Override protected void doC() { System.out.println(&amp;#34;C&amp;#34;); } public static void main(String[] args) { new TemplateImpl().doing(); } } </description>
    </item>
    
    <item>
      <title>委派</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A7%94%E6%B4%BE/</link>
      <pubDate>Tue, 31 Jan 2023 12:50:32 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A7%94%E6%B4%BE/</guid>
      <description>委派 委托者不自己处理任务，根据某种策略选择委托人代处理。比如上级分配任务 · spring security的ProviderManager::authenticate()应该属于委派，它会分别调用AuthenticationProvider实现类的support()，选择声称可 验证此Authentication的Provider，让其验证
classDiagram class AuthenticationProvider { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;support(Class clazz) boolean &amp;#43;authenticate(Authentication authentication) void } class JwtAuthenticationProvider JwtAuthenticationProvider ..|&amp;gt; AuthenticationProvider : 实现 class UsernamePasswordAuthenticationProvider UsernamePasswordAuthenticationProvider ..|&amp;gt; AuthenticationProvider : 实现 class ProviderManager { &amp;#43;authenticate(Authentication authentication) void } ProviderManager ..&amp;gt; JwtAuthenticationProvider : 局变 ProviderManager ..&amp;gt; UsernamePasswordAuthenticationProvider : 局变 </description>
    </item>
    
    <item>
      <title>组合</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88/</link>
      <pubDate>Tue, 31 Jan 2023 09:58:53 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88/</guid>
      <description>组合 树形层级结构，各节点都实现同一顶层接口具有共同操作且存在递归嵌套。比如文件目录系统 classDiagram class FileNode { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;path() String &amp;#43;parent() FileNode &amp;#43;childs() List&amp;lt;FileNode&amp;gt; &amp;#43;isFile() boolean } FileNode ..&amp;gt; FileNode : 返回值 class Directory { -String path -FileNode parent -List&amp;lt;FileNode&amp;gt; childs -boolean isFile } Directory ..|&amp;gt; FileNode : 实现 Directory *-- FileNode : 构造器初始化成员 class File { -String path -FileNode parent -List&amp;lt;FileNode&amp;gt; childs -boolean isFile &amp;#43;extName() String } File ..|&amp;gt; FileNode : 实现 File *-- FileNode : 构造器初始化成员 </description>
    </item>
    
    <item>
      <title>享元</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83/</link>
      <pubDate>Mon, 30 Jan 2023 19:03:14 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83/</guid>
      <description>享元 用于将高频创建的对象重复利用，比如连接池、线程池 · 将可能被频繁重复创建的对象交给工厂负责提供/回收，工厂在初始化时就使用缓存池缓存一定数量的实例并对外提供
import lombok.AllArgsConstructor; import java.util.Stack; @AllArgsConstructor class Connection { private final String url; private final String username; private final String password; } public class ConnectionPoolFlyweight { private static final int POOL_SIZE = 10; private static final int WAIT_MILLISECONDS = 3000; private static final Stack&amp;lt;Connection&amp;gt; POOL = new Stack&amp;lt;&amp;gt;(); static { for (int i = 0; i &amp;lt; POOL_SIZE; i++) { POOL.push(new Connection(&amp;#34;localhost:2023&amp;#34;, &amp;#34;root&amp;#34;, &amp;#34;123456&amp;#34;)); } } public static Connection getConnection() throws InterruptedException { if (POOL.</description>
    </item>
    
    <item>
      <title>桥接</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5/</link>
      <pubDate>Mon, 30 Jan 2023 11:52:51 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5/</guid>
      <description>桥接 组合各实现类的接口并实现抽象服务接口，以此将抽象服务和具体实现连接，并允许实现类的多种组合可能 · 被桥接者
classDiagram class IO { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class Calculate { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class Memory { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class Computer { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class Screen Screen ..|&amp;gt; IO : 实现 class Keyboard Keyboard ..|&amp;gt; IO : 实现 class Alu Alu ..|&amp;gt; Calculate : 实现 class Ram Ram ..|&amp;gt; Memory : 实现 class Register Register ..|&amp;gt; Memory : 实现 class ComputerNoScreen ComputerNoScreen ..|&amp;gt; Computer : 实现 class ComputerNoRam ComputerNoRam .</description>
    </item>
    
    <item>
      <title>适配器</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8/</link>
      <pubDate>Sun, 29 Jan 2023 18:50:01 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8/</guid>
      <description>适配器 用于后期维护时解决兼容问题：将服务类的接口转为调用者期望的接口 类适配器 · 继承自服务类并实现调用者期望的接口，但适配器同时拥有了期望方法和原方法，违背迪米特原则
classDiagram class SourceA { &amp;#43;sourceServiceA() void } class SourceB { &amp;#43;sourceServiceB() void } class Target { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;targetService() void } class Adapter { &amp;#43;sourceServiceA() void &amp;#43;sourceServiceB() void &amp;#43;targetService() void } Adapter ..|&amp;gt; Target : 实现 Adapter --|&amp;gt; SourceA : 继承 Adapter --|&amp;gt; SourceB : 继承 class Main Main ..&amp;gt; Adapter : 实例化 对象适配器 · 组合服务类并实现调用者期望的接口
classDiagram class SourceA { &amp;#43;sourceServiceA() void } class SourceB { &amp;#43;sourceServiceB() void } class Target { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; &amp;#43;targetService() void } class Adapter { &amp;#43;targetService() void } Adapter .</description>
    </item>
    
    <item>
      <title>代理</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sun, 29 Jan 2023 17:23:14 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86/</guid>
      <description>代理 · 作为中介在方法前后执行其他操作，需要对外透明——同类型同方法签名，外界不直接调用被代理类，调用代理，被代理类由代理负责调用。所以在被代理类内部调用 自己的方法是和代理无关的，代理行为不会生效。 import net.sf.cglib.proxy.Enhancer; import net.sf.cglib.proxy.MethodInterceptor; import java.lang.reflect.Proxy; interface BeProxy { void hello(String msg); } class BeProxyImpl implements BeProxy { @Override public void hello(String msg) { System.out.println(&amp;#34;Hello &amp;#34; + msg + &amp;#34; !&amp;#34;); } public static void main(String[] args) { //非代理 System.out.println(&amp;#34;非代理&amp;#34;); BeProxy beProxy = new BeProxyImpl(); beProxy.hello(&amp;#34;World&amp;#34;); //jdk动态代理，通过生成实现了被代理类相同接口的实现类作为代理来实现对外透明，那么被代理方法必须声明在接口中 System.out.println(&amp;#34;\njdk动态代理&amp;#34;); ((BeProxy) Proxy.newProxyInstance(BeProxy.class.getClassLoader(), BeProxyImpl.class.getInterfaces(), ((proxy, method, arguments) -&amp;gt; { System.out.println(&amp;#34;before&amp;#34;); Object returnVal = method.invoke(beProxy, arguments); System.out.println(&amp;#34;after&amp;#34;); return returnVal; }))).hello(&amp;#34;World&amp;#34;); //cglib动态代理，通过生成继承自被代理类的子类作为代理来实现对外透明，那么被代理方法必须是可被继承的：非final、static.</description>
    </item>
    
    <item>
      <title>建造者</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85/</link>
      <pubDate>Sun, 29 Jan 2023 17:00:36 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85/</guid>
      <description>建造者 用于将复杂对象的构建过程分步，比如MybatisPlus中对sql语句的构建。 · 外界使用时类似setter，一般对外屏蔽构造方法，并且与链式调用结合较广泛。简单场景可使用lombok的@Builder，它会为class生成一个静态的Builder类， 内含相同的全部成员和一个全参构造，new的时机被延迟到build()。
import lombok.Singular; import lombok.ToString; import java.util.List; @lombok.Builder @ToString public class Builder { private final String strMember; private final Object othersComplexMember1; private final Object othersComplexMember2; @Singular(&amp;#34;collectionMember&amp;#34;) private final List&amp;lt;Object&amp;gt; collectionMember; public static void main(String[] args) { System.out.println( Builder.builder() .strMember(&amp;#34;test&amp;#34;) .othersComplexMember1(new Object()) .othersComplexMember2(new Object()) .collectionMember(new Object()) .collectionMember(new Object()) .build() ); } } </description>
    </item>
    
    <item>
      <title>原型</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Sun, 29 Jan 2023 14:32:01 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B/</guid>
      <description>原型 用于复制已有对象，⚠️和单例相悖 · java的Object中有一个protected native Object clone()用于新建对象空间并复制成员值。在Java中做原型可通过实现标记型接口Cloneable 并重写clone()，但这只是浅克隆：只复制成员值，引用类型则只是复制了引用值。
· 在说单例时提到Java的反序列化可以保证新建对象，除非其声明了Object readResolve()。可以用这个机制达到深克隆的效果。
import lombok.AllArgsConstructor; import lombok.Getter; import lombok.Setter; import java.io.*; abstract class Prototype implements Cloneable, Serializable { @Override public Prototype clone() throws CloneNotSupportedException { return (Prototype) super.clone(); } public Prototype deepClone() throws IOException, ClassNotFoundException { try ( ByteArrayOutputStream byteArrOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objOutputStream = new ObjectOutputStream(byteArrOutputStream) ) { objOutputStream.writeObject(this); try ( ByteArrayInputStream byteArrInputStream = new ByteArrayInputStream(byteArrOutputStream.toByteArray()); ObjectInputStream objInputStream = new ObjectInputStream(byteArrInputStream); ) { return (Prototype) objInputStream.</description>
    </item>
    
    <item>
      <title>单例</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Sat, 14 Jan 2023 01:32:21 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B/</guid>
      <description>单例 确保一个class永远只有一个实例，对外开放一个唯一的获取入口 在Java中能破坏此定义的方式和解决方案如下 · 构造方法：通过私有化构造方法，但外界仍可通过反射调用，可通过if(null != instance)抛异常 · 反序列化：通过定义一个private Object readResolve()返回自己的单例，Java反序列化时会判断如果存在此方法则反射调用它获得实例而不新建实例 饿汉式 · 不论有没有地方用，都实例化，这种办法浪费内存
静态字段实现 · 通过将实例对象赋给静态字段使其在class加载时就实例化
· 没有线程安全问题，如果多个线程同时导致Class加载，由JVM负责线程安全，使其在同class加载器下只加载一次
· 如果没有地方调用getInstance()，而只是比如说外界使用了其静态字段而导致其初始化，会浪费内存
public class HungrySingleton { private static final HungrySingleton INSTANCE = new HungrySingleton(); private HungrySingleton() { if (null != INSTANCE) { throw new RuntimeException(&amp;#34;don&amp;#39;t call by reflect&amp;#34;); } } private Object readResolve() { return getInstance(); } public static HungrySingleton getInstance() { return INSTANCE; } } 枚举实现 · 依靠Java的枚举语法，天然就是单例并且不可反射创建
public enum EnumRegisterSingleton { INSTANCE; private Object readResolve() { return getInstance(); } public static EnumRegisterSingleton getInstance() { return INSTANCE; } } 懒汉式 · 真的被调用了getInstance()时才实例化</description>
    </item>
    
    <item>
      <title>工厂</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82/</link>
      <pubDate>Thu, 12 Jan 2023 22:26:38 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82/</guid>
      <description>工厂 用于隐藏实例化过程 不隐藏 · Main直接根据条件实例化所需的ProductImpl
classDiagram class Product { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class ProductA ProductA ..|&amp;gt; Product : 实现 class ProductB ProductB ..|&amp;gt; Product : 实现 class Main Main ..&amp;gt; ProductA : 实例化 Main ..&amp;gt; ProductB : 实例化 简单工厂 · 隐藏ProductImpl的实例化过程，这个过程可能很复杂，改由Factory::produce负责，Main通过入参告知其应提供哪个ProductImpl
· 但这样在新增ProductImpl时，需要修改Factory，违反了开闭原则；且所有ProductImpl都由Factory::produce产生，违反了单一原则
classDiagram class Product { &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; } class ProductA ProductA ..|&amp;gt; Product : 实现 class ProductB ProductB ..|&amp;gt; Product : 实现 class Factory { &amp;#43;produce(condition) Product } Factory ..&amp;gt; Product : 返回 Factory .</description>
    </item>
    
    <item>
      <title>README</title>
      <link>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/readme/</link>
      <pubDate>Wed, 11 Jan 2023 16:43:10 +0800</pubDate>
      
      <guid>https://woieha320r.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/readme/</guid>
      <description>用UML表达设计模式 使用mermaid绘制：https://mermaid.js.org 需要在idea的设置-&amp;gt;语言和框架-&amp;gt;markdown-&amp;gt;markdown扩展中开启mermaid（idea2020下载的mermaid为8.6版，会报错） vscode安装markdown扩展自动支持，无需设置 UML </description>
    </item>
    
  </channel>
</rss>
